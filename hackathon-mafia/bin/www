#!/usr/bin/env node

/**
 * Module dependencies.
 */

const appModule = require('../app');
const app = appModule.expressApp;
const gameRooms = appModule.gameRooms;
const debug = require('debug')('hackathon-mafia:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io     = require('socket.io')(server);

/**
 * Socket IO
 */
    
io.on('connection', (socket) => {
    
    socket.on('playerJoined', (msg) => {
        const game = gameRooms[msg.gameID];
        const gamePlayers = game.getPlayersNames();

        socket.emit('getAllPlayers', gamePlayers);
        const playerInfo = {
            playerID : msg.playerID,
            playerName : game.players[msg.playerID].name
        };
        io.emit('playerJoined', playerInfo);
    });

    socket.on('nameChange', (msg) => {
        if (msg.page === 'lobby') {
            const game = gameRooms[msg.gameID];
            const player = game.players[msg.playerID];
            player.name = msg.data.name;
            console.log('username has been changed: ' + msg.data.name);
            io.emit('playerChangedName', { playerID: msg.playerID, newName: msg.data.name });
        }
    });

    socket.on('playerReady', (msg) => {
        if (msg.page === 'game') {
            let allReady = true; // assume everyone is ready
            const game = gameRooms[msg.gameID];
            const player = game.players[msg.playerID];
            player.setStatus(msg.data.ready);
            console.log(game);
            io.emit('playerReady', msg);

            // Check if everyone is ready
            for (let player in game.players) {
                console.log(player);
                if (game.players[player].status === 'NOT_READY') {
                    allReady = false; // not everyone is ready
                }
            }

            if (allReady) {
                for (let key in game.players) {
                    game.players[key].setStatus('ALIVE');
                }
                io.emit('allReady');
            }
        }
    });



    socket.on('adminStartedGame', (game) => {
        io.emit('gameStarts');
    });

    socket.on('vote', (msg) => {
        if (msg.page === 'game') {
            const game = gameRooms[msg.gameID];
            const player = game.players[msg.playerID]
            if(player.status === "ALIVE") {
                game.addVote(msg.playerID, msg.data.votedPlayerId);
                msg.playerName = player.name;

                io.emit('playerVoted', msg);
            }
        }
    });

    socket.on('vote', (msg) => {
        if (msg.page === 'game') {
            const game = gameRooms[msg.gameID];

        }
    });

    socket.on('sheriffVote', (msg) => {
        if (msg.page === 'game') {
            const game = gameRooms[msg.gameID];
            const checkedPlayer = game.players[msg.data.checkedPlayer];

            const message = {
                gameID: msg.gameID,
                playerID: msg.playerID,
                data: {
                    isMafia: (player.role.id === 0)
                }
            };

            socket.emit('isMafia', message); //Only in sheriff script
            const msg = game.getNightOutcome();
            setTimeout(() => {
                io.emit("wakeUp", msg)
            }, 5000);
        }
    });

    socket.on('doctorVote', (msg) => {
        if (msg.page === 'game') {
            const game = gameRooms[msg.gameID];
            const player = game.players[msg.data.curedPlayer];
            game.playerHealed = player.id;

            setTimeout(() => {
                io.emit("sheriffTime")
            }, 5000);
        }
    });

    //When the werewolfs press the kill button
    socket.on('mafiaKills', (msg) => {
        setTimeout(() => {
            io.emit("doctorTime");
        }, 5000)
    });

    //When mafia selects a player to kill
    socket.on('mafiaVote', (msg) => {
        if (msg.page === 'game') {
            const game = gameRooms[msg.gameID];
            game.playerKilledByMafia = msg.data.playerToKill;
            const msg = {
                playerToKill: msg.data.playerToKill
            }
            io.emit("voteChange", msg); //Only in mafia script
        }
    });

    //When the player clicks Ready on the role screen
    socket.on('playerAsleep', (msg) => {
        if (msg.page === 'game') {
            const game = gameRooms[msg.gameID];
            game.playersAsleep += 1;
            
            if(game.allPlayersAsleep()) {
                io.emit("mafiaTime");
            } 
        }
    });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}