#!/usr/bin/env node

/**
 * Module dependencies.
 */

const appModule = require('../app');
const app = appModule.expressApp;
const gameRooms = appModule.gameRooms;
const debug = require('debug')('hackathon-mafia:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io     = require('socket.io')(server);

/**
 * Socket IO
 */
    
io.on('connection', (socket) => {
    
    socket.on('playerJoined', (msg) => {
        const game = gameRooms[msg.gameID];
        const gamePlayers = game.getPlayersNames();

        socket.emit('getAllPlayers', gamePlayers);
        const playerInfo = {
            playerID : msg.playerID,
            playerName : game.players[msg.playerID].name
        };
        io.emit('playerJoined', playerInfo);
    });

    socket.on('nameChange', (msg) => {
        if (msg.page === 'lobby') {
            const game = gameRooms[msg.gameID];
            const player = game.players[msg.playerID];
            player.name = msg.data.name;
            console.log('username has been changed: ' + msg.data.name);
            io.emit('playerChangedName', { playerID: msg.playerID, newName: msg.data.name });
        }
    });

    socket.on('playerReady', (msg) => {
        if (msg.page === 'game') {
            let allReady = true; // assume everyone is ready
            const game = gameRooms[msg.gameID];
            const player = game.players[msg.playerID];
            player.setStatus(msg.data.ready);
            io.emit('playerReady', msg);

            // Check if everyone is ready
            for (let player in game.players) {
                if (game.players[player].status === 'NOT_READY') {
                    allReady = false; // not everyone is ready
                }
            }

            if (allReady) {
                for (let key in game.players) {
                    game.players[key].setStatus('ALIVE');
                }
                io.emit('allReady');
            }
        }
    });



    socket.on('adminStartedGame', (game) => {
        io.emit('gameStarts');
    });

    socket.on('vote', (msg) => {
        if (msg.page === 'game') {
            const game = gameRooms[msg.gameID];
            let votedId = msg.data.votedPlayerId;
            if (game.status === "MAFIA") {
                game.playerKilledByMafia = votedId;
                setTimeout(() => {
                    game.status = "DOCTOR";
                    io.emit("doctorTime");
                }, 5000)
            } else if (game.status === "DOCTOR") {
                game.playerHealed = votedId;
                setTimeout(() => {
                    game.status = "SHERIFF";
                    io.emit("sheriffTime");
                }, 5000);
            } else if (game.status === "SHERIFF") {
                const checkedPlayer = game.players[votedId];
                
                const message = {
                    gameID: msg.gameID,
                    playerID: msg.playerID,
                    data: {
                        isMafia: (checkedPlayer.role.id === 0)
                    }
                };
    
                socket.emit('isMafia', message); //Only in sheriff script
                const outcomeN = game.getNightOutcome();
                
                setTimeout(() => {
                    game.status = "TOWN";
                    setTimeout(() => {
                        //get game otcome
                        console.log('vote finished');
                        const outcome = game.getDayOutcome();
                        io.emit('voteFinished', outcome);
                        const gameStatus = game.getGameStatus();
                        if(gameStatus.finished) {
                            io.emit('gameFinished', gameStatus);
                        } else {
                            game.status = "MAFIA";
                        }
                    }, 20000)
                    io.emit("wakeUp", outcomeN);
                    const gameStatus = game.getGameStatus();
                    if(gameStatus.finished) {
                        io.emit('gameFinished', gameStatus);
                    } else {
                        game.status = "MAFIA";
                    }
                }, 5000);
            } else {
                //town vote 
                const player = game.players[msg.playerID]
                if(player.status === "ALIVE") {
                    game.addVote(msg.playerID, msg.data.votedPlayerId);
                    console.log('vote added');
                    msg.voteByID = msg.playerID;
                    msg.voteForName = game.players[msg.data.votedPlayerId].name;
                    io.emit('playerVoted', msg);
                }
            }
        }
    });

    //When the player clicks Ready on the role screen
    socket.on('playerAsleep', (msg) => {
        if (msg.page === 'game') {
            const game = gameRooms[msg.gameID];
            game.playersAsleep += 1;
            console.log('player asleep')
            
            if(game.allPlayersAsleep()) {
                game.status = "MAFIA";
                game.playersAsleep = 0;
                console.log('go into mafia');
                io.emit("mafiaTime");
            } 
        }
    });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}